user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    sendfile on;
    keepalive_timeout 65;
    client_max_body_size 100M;
    
    upstream spring_backend {
        server workflow-spring-backend:2706;
    }
    
    upstream fastapi_executor {
        server workflow-fastapi-executor:8000;
    }
    
    upstream kafka_ui {
        server workflow-kafka-ui:8080;
    }
    
    upstream redis_commander {
        server workflow-redis-commander:8081;
    }
    
    server {
        listen 80;
        server_name _;
        return 301 https://$host$request_uri;
    }
    
    server {
        listen 443 ssl;
        server_name _;
        
        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        

        location /api/ {
            proxy_pass http://spring_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /executor/ {
            rewrite ^/executor/(.*)$ /$1 break;
            proxy_pass http://fastapi_executor;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /kafka-ui/ {
            rewrite ^/kafka-ui/(.*)$ /$1 break;
            proxy_pass http://kafka_ui;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /redis-ui/ {
            rewrite ^/redis-ui/(.*)$ /$1 break;
            proxy_pass http://redis_commander;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location / {
            return 404 '{"error": "Not Found", "message": "Use /api/ for backend, /executor/ for node executor, /kafka-ui/ for Kafka admin, or /redis-ui/ for Redis admin"}';
            add_header Content-Type application/json;
        }
    }
}